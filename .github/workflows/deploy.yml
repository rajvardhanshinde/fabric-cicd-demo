name: Deploy to Fabric

on:
  push:
    branches: [ dev, main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout
      - name: Checkout repository
        uses: actions/checkout@v4

      # Azure login (SP JSON in AZURE_CREDENTIALS)
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          allow-no-subscriptions: true

      # Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r scripts/requirements.txt

      # (Optional) show what we can deploy
      - name: Discover artifacts
        run: |
          echo "üîé Notebooks:"
          find "${GITHUB_WORKSPACE}" -type f -iname "*.ipynb" | sed 's/^/ - /' || true
          echo ""
          echo "üîé PBIP / Semantic Model files:"
          find "${GITHUB_WORKSPACE}" -type f \( -iname "*.pbism" -o -iname "*.json" -o -iname "*.tmdl" \) \
            | grep -i "SemanticModel" | sed 's/^/ - /' || true

      # Sanity check: required env vars exist (prevents param validation failures)
      - name: Validate required env for parameter.yml
        env:
          FABRIC_DEV_WORKSPACE_ID:  ${{ secrets.FABRIC_DEV_WORKSPACE_ID }}
          FABRIC_PROD_WORKSPACE_ID: ${{ secrets.FABRIC_PROD_WORKSPACE_ID }}
          FABRIC_DEV_LAKEHOUSE_ID:  ${{ secrets.FABRIC_DEV_LAKEHOUSE_ID }}
          FABRIC_PROD_LAKEHOUSE_ID: ${{ secrets.FABRIC_PROD_LAKEHOUSE_ID }}
          FABRIC_DEV_SQL_HOST:      ${{ secrets.FABRIC_DEV_SQL_HOST }}
          FABRIC_PROD_SQL_HOST:     ${{ secrets.FABRIC_PROD_SQL_HOST }}
        run: |
          set -euo pipefail
          for v in FABRIC_DEV_WORKSPACE_ID FABRIC_PROD_WORKSPACE_ID FABRIC_DEV_LAKEHOUSE_ID FABRIC_PROD_LAKEHOUSE_ID FABRIC_DEV_SQL_HOST FABRIC_PROD_SQL_HOST; do
            [ -n "${!v:-}" ] || { echo "‚ùå Missing $v"; exit 1; }
            echo "‚úÖ $v present"
          done

      # Deploy to Fabric (branch ‚Üí workspace mapping)
      - name: Deploy Fabric Artifacts
        env:
          # expose all IDs/hosts so parameter.yml can substitute them
          FABRIC_DEV_WORKSPACE_ID:  ${{ secrets.FABRIC_DEV_WORKSPACE_ID }}
          FABRIC_PROD_WORKSPACE_ID: ${{ secrets.FABRIC_PROD_WORKSPACE_ID }}
          FABRIC_DEV_LAKEHOUSE_ID:  ${{ secrets.FABRIC_DEV_LAKEHOUSE_ID }}
          FABRIC_PROD_LAKEHOUSE_ID: ${{ secrets.FABRIC_PROD_LAKEHOUSE_ID }}
          FABRIC_DEV_SQL_HOST:      ${{ secrets.FABRIC_DEV_SQL_HOST }}
          FABRIC_PROD_SQL_HOST:     ${{ secrets.FABRIC_PROD_SQL_HOST }}
          # Uncomment if your PBIP stores sqlEndpointId and you‚Äôve added these secrets:
          # FABRIC_DEV_SQL_ID:        ${{ secrets.FABRIC_DEV_SQL_ID }}
          # FABRIC_PROD_SQL_ID:       ${{ secrets.FABRIC_PROD_SQL_ID }}
        run: |
          set -euo pipefail
          if [[ "${GITHUB_REF_NAME}" == "dev" ]]; then
            echo "üöÄ Deploying to DEV workspace..."
            python scripts/deploy_fabric_items.py \
              --WorkspaceId "${{ secrets.FABRIC_DEV_WORKSPACE_ID }}" \
              --Environment "DEV" \
              --RepositoryDirectory "${GITHUB_WORKSPACE}" \
              --ItemsInScope all \
              --Debug
          elif [[ "${GITHUB_REF_NAME}" == "main" ]]; then
            echo "üöÄ Deploying to PROD workspace..."
            python scripts/deploy_fabric_items.py \
              --WorkspaceId "${{ secrets.FABRIC_PROD_WORKSPACE_ID }}" \
              --Environment "PROD" \
              --RepositoryDirectory "${GITHUB_WORKSPACE}" \
              --ItemsInScope all \
              --Debug
          else
            echo "‚ö†Ô∏è Branch ${GITHUB_REF_NAME} is not mapped. Skipping."
          fi
