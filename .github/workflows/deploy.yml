name: Deploy to Fabric

on:
  push:
    branches: [ dev, main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # --------------------------
      # Checkout
      # --------------------------
      - name: Checkout repository
        uses: actions/checkout@v4

      # --------------------------
      # Azure login (SP JSON in AZURE_CREDENTIALS)
      # --------------------------
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          allow-no-subscriptions: true

      # --------------------------
      # Python
      # --------------------------
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r scripts/requirements.txt

      # --------------------------
      # Debug ¬∑ env presence & masked fingerprints
      # --------------------------
      - name: Debug ¬∑ env presence & fingerprints (masked)
        env:
          FABRIC_DEV_WORKSPACE_ID:  ${{ secrets.FABRIC_DEV_WORKSPACE_ID }}
          FABRIC_PROD_WORKSPACE_ID: ${{ secrets.FABRIC_PROD_WORKSPACE_ID }}
          FABRIC_DEV_LAKEHOUSE_ID:  ${{ secrets.FABRIC_DEV_LAKEHOUSE_ID }}
          FABRIC_PROD_LAKEHOUSE_ID: ${{ secrets.FABRIC_PROD_LAKEHOUSE_ID }}
          FABRIC_DEV_SQL_HOST:      ${{ secrets.FABRIC_DEV_SQL_HOST }}
          FABRIC_PROD_SQL_HOST:     ${{ secrets.FABRIC_PROD_SQL_HOST }}
        run: |
          set -euo pipefail
          check() { 
            local name="$1"; local val="${!name:-}";
            if [ -z "${val}" ]; then 
              echo "‚ùå MISSING $name"; return 1; 
            else 
              echo "‚úÖ $name present ¬∑ len=${#val} ¬∑ last4=${val: -4}";
            fi
          }
          echo "=== Required variables ==="
          ok=0
          for v in FABRIC_DEV_WORKSPACE_ID FABRIC_PROD_WORKSPACE_ID FABRIC_DEV_LAKEHOUSE_ID FABRIC_PROD_LAKEHOUSE_ID FABRIC_DEV_SQL_HOST FABRIC_PROD_SQL_HOST; do
            check "$v" || ok=1
          done
          if [ "$ok" -ne 0 ]; then exit 1; fi

      # --------------------------
      # Debug ¬∑ scan repo for DEV identifiers in PBIP/TMDL
      # --------------------------
      - name: Debug ¬∑ scan repo for DEV identifiers in PBIP/TMDL
        env:
          FABRIC_DEV_WORKSPACE_ID:  ${{ secrets.FABRIC_DEV_WORKSPACE_ID }}
          FABRIC_DEV_LAKEHOUSE_ID:  ${{ secrets.FABRIC_DEV_LAKEHOUSE_ID }}
          FABRIC_DEV_SQL_HOST:      ${{ secrets.FABRIC_DEV_SQL_HOST }}
        run: |
          set -euo pipefail

          echo "=== Candidate PBIP/TMDL files ==="
          echo "¬∑ PBISM files:"
          find . -type f -iname "*.pbism" | sed 's/^/ - /' || true
          echo "¬∑ JSON files (under SemanticModel):"
          find . -type f -iname "*.json" | grep -i "SemanticModel" | sed 's/^/ - /' || true
          echo "¬∑ TMDL files:"
          find . -type f -iname "*.tmdl" | sed 's/^/ - /' || true

          echo ""
          echo "=== PBISM/JSON: counts of DEV workspaceId/artifactId matches ==="
          while IFS= read -r f; do
            cw=$(grep -F -c "\"workspaceId\":\"$FABRIC_DEV_WORKSPACE_ID\"" "$f" || true)
            ca=$(grep -F -c "\"artifactId\":\"$FABRIC_DEV_LAKEHOUSE_ID\"" "$f" || true)
            if [ "$cw" != "0" ] || [ "$ca" != "0" ]; then
              echo " - $f ¬∑ workspaceId=$cw ¬∑ artifactId=$ca"
            fi
          done < <( (find . -type f -iname "*.pbism"; find . -type f -iname "*.json" | grep -i "SemanticModel") 2>/dev/null )

          echo ""
          echo "=== TMDL: counts of DEV Sql.Database(host) and LakehouseId matches ==="
          while IFS= read -r f; do
            ch=$(grep -F -c "$FABRIC_DEV_SQL_HOST" "$f" || true)
            cl=$(grep -F -c "$FABRIC_DEV_LAKEHOUSE_ID" "$f" || true)
            if [ "$ch" != "0" ] || [ "$cl" != "0" ]; then
              echo " - $f ¬∑ host=$ch ¬∑ lakehouseId=$cl"
            fi
          done < <(find . -type f -iname "*.tmdl" 2>/dev/null)

          echo ""
          echo "Note: Values are masked by GitHub; we only show counts to confirm matches."

      # --------------------------
      # (Optional) Discover artifacts for visibility
      # --------------------------
      - name: Discover artifacts
        run: |
          echo "üîé Notebooks (*.ipynb):"
          find "${GITHUB_WORKSPACE}" -type f -iname "*.ipynb" | sed 's/^/ - /' || true
          echo ""
          echo "üîé PBIP / Semantic Model files:"
          find "${GITHUB_WORKSPACE}" -type f \( -iname "*.pbism" -o -iname "*.json" -o -iname "*.tmdl" \) \
            | grep -i "SemanticModel" | sed 's/^/ - /' || true

      # --------------------------
      # Deploy to Fabric (branch ‚Üí workspace mapping)
      # --------------------------
      - name: Deploy Fabric Artifacts
        env:
          # expose all IDs/hosts so parameter.yml can substitute them
          FABRIC_DEV_WORKSPACE_ID:  ${{ secrets.FABRIC_DEV_WORKSPACE_ID }}
          FABRIC_PROD_WORKSPACE_ID: ${{ secrets.FABRIC_PROD_WORKSPACE_ID }}
          FABRIC_DEV_LAKEHOUSE_ID:  ${{ secrets.FABRIC_DEV_LAKEHOUSE_ID }}
          FABRIC_PROD_LAKEHOUSE_ID: ${{ secrets.FABRIC_PROD_LAKEHOUSE_ID }}
          FABRIC_DEV_SQL_HOST:      ${{ secrets.FABRIC_DEV_SQL_HOST }}
          FABRIC_PROD_SQL_HOST:     ${{ secrets.FABRIC_PROD_SQL_HOST }}
          # Uncomment if your PBIP stores sqlEndpointId and you‚Äôve added these secrets:
          # FABRIC_DEV_SQL_ID:        ${{ secrets.FABRIC_DEV_SQL_ID }}
          # FABRIC_PROD_SQL_ID:       ${{ secrets.FABRIC_PROD_SQL_ID }}
        run: |
          set -euo pipefail
          if [[ "${GITHUB_REF_NAME}" == "dev" ]]; then
            echo "üöÄ Deploying to DEV workspace..."
            python scripts/deploy_fabric_items.py \
              --WorkspaceId "${{ secrets.FABRIC_DEV_WORKSPACE_ID }}" \
              --Environment "DEV" \
              --RepositoryDirectory "${GITHUB_WORKSPACE}" \
              --ItemsInScope all \
              --Debug
          elif [[ "${GITHUB_REF_NAME}" == "main" ]]; then
            echo "üöÄ Deploying to PROD workspace..."
            python scripts/deploy_fabric_items.py \
              --WorkspaceId "${{ secrets.FABRIC_PROD_WORKSPACE_ID }}" \
              --Environment "PROD" \
              --RepositoryDirectory "${GITHUB_WORKSPACE}" \
              --ItemsInScope all \
              --Debug
          else
            echo "‚ö†Ô∏è Branch ${GITHUB_REF_NAME} is not mapped. Skipping."
          fi
