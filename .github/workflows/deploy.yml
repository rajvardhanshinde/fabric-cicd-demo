name: Deploy to Fabric (double-tap Direct Lake)

on:
  push:
    branches: [ dev, main ]
  workflow_dispatch:

env:
  # Change this to your Lakehouse display name as it appears in the workspace
  LAKEHOUSE_DISPLAY_NAME: "sample_LH"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Azure auth for fabric-cicd (your existing SP JSON)
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          allow-no-subscriptions: true

      # Python toolchain (fabric-cicd + Fabric CLI)
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install libs (fabric-cicd + Fabric CLI)
        run: |
          python -m pip install --upgrade pip
          pip install fabric-cicd ms-fabric-cli

      # ---------- PASS 1: deploy everything EXCEPT Semantic Models & Reports ----------
      - name: Pass 1 · Deploy infra (no SM/Reports)
        if: github.ref_name == 'dev' || github.ref_name == 'main'
        run: |
          set -euo pipefail
          if [[ "${GITHUB_REF_NAME}" == "dev" ]]; then
            TARGET_WS="${{ secrets.FABRIC_DEV_WORKSPACE_ID }}"
            TARGET_ENV="DEV"
          else
            TARGET_WS="${{ secrets.FABRIC_PROD_WORKSPACE_ID }}"
            TARGET_ENV="PROD"
          fi

          echo "🚀 PASS 1 → ${TARGET_ENV} workspace: ${TARGET_WS}"
          # Limit item types so Lakehouse & dependencies go first; SM/Reports later
          python scripts/deploy_fabric_items.py \
            --WorkspaceId "${TARGET_WS}" \
            --Environment "${TARGET_ENV}" \
            --RepositoryDirectory "${GITHUB_WORKSPACE}" \
            --ItemsInScope "Notebook,DataPipeline,Lakehouse,DataWarehouse,SQLScript" \
            --Debug

      # ---------- Only on PROD promotion (main): discover PROD SQL endpoint id ----------
      - name: FAB login for Fabric CLI (SP)
        if: github.ref_name == 'main'
        run: |
          set -euo pipefail
          # Use the same SP from AZURE_CREDENTIALS
          CLIENT_ID=$(jq -r '.clientId' <<< '${{ secrets.AZURE_CREDENTIALS }}')
          CLIENT_SECRET=$(jq -r '.clientSecret' <<< '${{ secrets.AZURE_CREDENTIALS }}')
          TENANT_ID=$(jq -r '.tenantId' <<< '${{ secrets.AZURE_CREDENTIALS }}')

          fab config set encryption_fallback_enabled true
          fab auth login -u "${CLIENT_ID}" -p "${CLIENT_SECRET}" --tenant "${TENANT_ID}"

      - name: Discover PROD SQL endpoint id & inject into parameter.yml
        if: github.ref_name == 'main'
        env:
          WORKSPACE_ID: ${{ secrets.FABRIC_PROD_WORKSPACE_ID }}
          LAKEHOUSE_DISPLAY_NAME: ${{ env.LAKEHOUSE_DISPLAY_NAME }}
        run: |
          set -euo pipefail
          echo "🔎 Querying SQL Endpoints in workspace ${WORKSPACE_ID}"
          # fetch SQLEndpoint items
          RESP=$(fab api -X get "/workspaces/${WORKSPACE_ID}/items?itemType=SQLEndpoint")
          DBID=$(echo "$RESP" | jq -r --arg name "${LAKEHOUSE_DISPLAY_NAME}" '.text.value[] | select(.displayName==$name and .type=="SQLEndpoint") | .id' | head -n1)

          if [[ -z "${DBID}" || "${DBID}" == "null" ]]; then
            echo "❌ Could not find SQLEndpoint id for Lakehouse '${LAKEHOUSE_DISPLAY_NAME}' in workspace ${WORKSPACE_ID}"
            echo "Response was:"
            echo "$RESP"
            exit 1
          fi

          echo "✅ Found PROD SQL endpoint id: ${DBID:0:4}… (masked)"
          # Replace placeholder 'databaseid' in parameter.yml with the discovered id
          sed -i.bak "s/\"databaseid\")/\"${DBID}\")/g" parameter.yml
          sed -i.bak "s/\"databaseid\" )/\"${DBID}\" )/g" parameter.yml

      # ---------- PASS 2: deploy Semantic Models & Reports (now we know the id) ----------
      - name: Pass 2 · Deploy SM & Reports (rebinding applies)
        if: github.ref_name == 'dev' || github.ref_name == 'main'
        run: |
          set -euo pipefail
          if [[ "${GITHUB_REF_NAME}" == "dev" ]]; then
            TARGET_WS="${{ secrets.FABRIC_DEV_WORKSPACE_ID }}"
            TARGET_ENV="DEV"
            ITEMS="SemanticModel,Report"   # still useful on dev to verify
          else
            TARGET_WS="${{ secrets.FABRIC_PROD_WORKSPACE_ID }}"
            TARGET_ENV="PROD"
            ITEMS="SemanticModel,Report"
          fi
          echo "🚀 PASS 2 → ${TARGET_ENV} workspace: ${TARGET_WS}"
          python scripts/deploy_fabric_items.py \
            --WorkspaceId "${TARGET_WS}" \
            --Environment "${TARGET_ENV}" \
            --RepositoryDirectory "${GITHUB_WORKSPACE}" \
            --ItemsInScope "${ITEMS}" \
            --Debug
